syntax = "proto3";

package Google.Protobuf.Protocol;
/* 유저 패킷 */


// msgid 는 모두 대문자로 써주세요
enum MsgId {
  C_REGISTERREQUEST = 0;
  S_REGISTERRESPONSE = 1;
  C_LOGINREQUEST = 2;
  S_LOGINRESPONSE = 3;
  C_SELECTCHARACTERREQUEST = 4;
  S_ENTER = 5;
  S_SPAWN = 6;
  S_DESPAWN = 7;
  C_MOVE = 8;
  S_MOVE = 9;
  C_ANIMATION = 10;
  S_ANIMATION = 11;
  C_CHAT = 12;
  S_CHAT = 13;
  C_BUYITEMREQUEST = 14;
  S_BUYITEMRESPONSE = 15;
  C_EQUIPITEMREQUEST = 16;
  S_EQUIPITEMRESPONSE = 17;
  C_DISROBEITEMREQUEST = 18;
  S_DISROBEITEMRESPONSE = 19;
  C_ACTIVEITEMREQUEST = 20;
  S_ACTIVEITEMREQUEST = 21;
  C_PARTYREQUEST = 22;
  S_PARTYRESPONSE = 23;
  C_ENTERDUNGEON = 24;
  S_ENTERDUNGEON = 25;
  S_LEAVEDUNGEON = 26;
  S_SCREENTEXT = 27;
  S_SCREENDONE = 28;
  C_PARTYINVITEREQUEST = 29;
  C_PARTYJOINREQUEST = 30;
  C_PARTYLISTREQUEST = 31;
  C_SEARCHPARTYREQUEST = 32;
  C_PARTYKICKREQUEST = 33;
  C_PARTYEXITREQUEST = 34;
  S_PARTYSEARCHRESPONSE = 35;
  S_PARTYRESULTRESPONSE = 36;
  C_MARKETLIST = 37;
  S_MARKETLIST = 38;
  C_MARKETMYLIST = 39;
  S_MARKETMYLIST = 40;
  C_SELLINMARKET = 41;
  S_SELLINMARKET = 42;
  C_BUYINMARKET = 43;
  S_BUYINMARKET = 44;
  C_INVENTORYREQUEST = 45;
  S_INVENTORYRESPONSE = 46;
  C_EMOTE = 47;
  S_EMOTE = 48;
  C_MATCHREQUEST = 49;
  S_MATCHRESPONSE = 50;
  C_SELLITEMREQUEST = 51;
  S_SELLITEMRESPONSE = 52;
  C_MARKETSELECTBUYNAME = 53;
  S_MARKETSELECTBUYNAME = 54;
  C_MATCHSTOPREQUEST = 55;
  S_MATCHSTOPRESPONSE = 56;
  S_MATCHINGNOTIFICATION = 57;
  C_SHOPINVENTORYREQUEST = 58;
  S_SHOPINVENTORYLIST = 59;
  C_MOVEITEMREQUEST = 60;
  S_MOVEITEMRESPONSE = 61;
  C_PARTYLEADERCHANGEREQUEST = 62;
  S_SETAUCTIONDATA = 63;
  C_ENTERAUCTIONBID = 64;
  S_ENTERAUCTIONBID = 65;
  S_FINALIZEBUYAUCTION = 66;
  S_FINALIZEALLAUCTION = 67;
  S_WAITAUCTION = 68;
  S_ENDAUCTION = 69;
  C_PLAYERACTION = 70;
  S_PLAYERACTION = 71;
  C_DUNGEONENTER = 72;
  S_DUNGEONSPAWN = 73;
  S_DUNGEONDESPAWN = 74;
  C_DUNGEONEXIT = 75;
  S_MONSTERSPAWN =76;
  C_MONSTERMOVE =77;
  S_MONSTERMOVE =78;
  S_MONSTERHIT =79;
  S_MONSTERATTCK =80;
  S_MONSTERDIE =81;
  S_PLAYERRANGEATTACK=82;
  C_PLAYERRANGEATTACK=83;
  S_RANGEATTACKIMPACT=84;
  C_RANGEATTACKIMPACT=85;
  S_RANGEATTACKCOLLIDE=86;
  C_RANGEATTACKCOLLIDE=87;
}

//회원가입 요청
message C_RegisterRequest {
  string email = 1;
  string nickname = 2;
  string password = 3;
}

//회원가입 응답
message S_RegisterResponse {
  bool success = 1;
  string message = 2;
  GlobalFailCode failCode = 3;
}

//로그인 요청
message C_LoginRequest {
  string email = 1;
  string password = 2;
}

//로그인 응답
message S_LoginResponse {
  bool success = 1;
  string token = 2;
  string message = 3;
  GlobalFailCode failCode = 4;
}

//캐릭터 선택
message C_SelectCharacterRequest {
  int32 class = 2;
}


// [수정] 다른유저에게 본인 케릭터 정보를 보내야한다.
message S_Enter {
  PlayerInfo player = 1;
}

// [수정] 본인에게 다른 유저 정보, 스토어리스트 보내야한다. 
message S_Spawn {
  int32 userId = 1;
  repeated PlayerInfo players = 2;
  repeated StoreItemInfo storeList = 3;
  repeated ItemData itemData = 4;
}

// 캐릭터 없애주기!
message S_Despawn {
  int32 playerId = 1;// 유저 id
}

/* 캐릭터 패킷 */

// [수정] 동기화 리메이크에 사용할 패킷
message C_Move {
  int32 playerId = 1;// 유저 id
  TransformInfo transform = 2;// 유저의 트랜스폼 정보
  int64 timestamp = 3;// 서버에서 핑 체크용.
  bool isMoving = 4;// 이동 중 여부 (true: 이동 중, false: 정지)
  Velocity velocity = 5;// 속도 벡터 (방향 + 속도)
  float speed = 6;
}

// ALL
message S_Move {
  repeated SyncTransformInfo transformInfos = 1;// 동기화된 트랜스폼 정보들. 
}

// 응답 패킷 - S_Animation
message C_Animation {
  int32 animCode = 1;
}

// ALL
message S_Animation {
  int32 playerId = 1;
  int32 animCode = 2;
}

/* 채팅 패킷 */

// ALL
message C_Chat {
  int32 playerId = 1;
  int32 type = 2;
  string senderName = 3;
  string chatMsg = 4;
}

// 응답 패킷 - C_Chat
message S_Chat {
  int32 playerId = 1;
  int32 type = 2;
  int32 errorType = 3;
  string chatMsg = 4;
}

/* 상점 패킷 */
message C_BuyItemRequest {
  string itemname = 1;
  int32 price = 2;
}
message S_BuyItemResponse {
  bool success = 1;
  string message = 2;
  GlobalFailCode failCode = 3;
}

/* 아이템 패킷 */

// 인벤토리 전체 정보 요청
message C_InventoryRequest {
  int32 charId = 1;
}

// 인벤토리 전체 정보 응답
message S_InventoryResponse {
  repeated ItemInfo inventory = 1;
}

/* 장착 관련 */
// 아이템 장착 요청
message C_EquipItemRequest {
  int32 itemId = 1;
}

// 아이템 장착 응답
message S_EquipItemResponse {
  int32 itemId = 1;
  bool success = 2;
  string message = 3;
  GlobalFailCode failCode = 4;
}

// 아이템 해제 요청
message C_DisrobeItemRequest {
  int32 itemId = 1;
}

// 아이템 해제 응답
message S_DisrobeItemResponse {
  int32 itemId = 1;
  bool success = 2;
  string message = 3;
  GlobalFailCode failCode = 4;
}

message C_ActiveItemRequest {
  int32 id = 1;// Inventory.id
  int64 timestamp = 2;
  // 아이템 사용에 필요한 추가 데이터들
}

message S_ActiveItemResponse {
  int32 userId = 5;
  int32 id = 1;// Inventory.id
  bool success = 2;
  string message = 3;
  GlobalFailCode failCode = 4;
  // 아이템 사용에 필요한 추가 데이터들
}

// 아이템 이동 요청
message C_MoveItemRequest {
  int32 itemId = 1;
  int32 position = 2;
}

// 아이템 이동 응답
message S_MoveItemResponse {
  int32 itemId = 1;
  int32 position = 2;
}

/* 파티 패킷 */

message C_PartyRequest {
  int32 userId = 1;
  string partyName = 2;// 파티 이름 추가
  int32 dungeonIndex = 3;// 선택한 던전 인덱스
}

// 초대용 패킷 
// 초대한 유저의 id를 파티 세션에서 검색을 한 후 파티가 존재하면 그 아이디를 전송
message C_PartyInviteRequest {
  string requesterUserNickname = 1;// 초대한 유저 닉네임
  string participaterUserNickname = 2;// 초대할 유저 닉네임
}

// 파티 신청 패킷
message C_PartyJoinRequest {
  string partyId = 1;// 파티 id
  int32 userId = 2;// 가입할 유저 id
}

message C_PartyListRequest {
  // 빈값으로 요청 
  // 5개만 요청(다음페이지를 누르면 다시 요청)
  // 서버에서 파티 세션 전송?
}

//지금은 아예 똑같거나 LIKE 써서 사용(추후 좋은아이디어가 있으면 수정)
message C_SearchPartyRequest {
  string partyName = 1;// 검색한 파티 이름
}

// 추방 패킷
// 추방 요청 유저가 파티세션에 있는지 검사 & 파티장인지 검사 후 성공 실패 전송
message C_PartyKickRequest {
  int32 requesterUserId = 1;// 추방 요청 유저 id
  int32 kickUserUserId = 2;// 추방 유저 id
}

// 파티 나가기
message C_PartyExitRequest {
  // 파티 세션에서 파티에 들어가있는지 검사 후 방장이였다면 다른 사람에게 방장을 넘기고 나가기
  int32 userId = 1;// 나갈 유저 id
}

// 파티 조회 관련 패킷
message S_PartySearchResponse {
  repeated PartyInfo info = 1;
  int32 case = 2;// case: (1 -> 모든 리스트 조회, 2 -> 검색)
  bool success = 3;
  string message = 4;
  GlobalFailCode failCode = 5;
}

// 파티 해체 관련 패킷
message S_PartyResultResponse {
  // 나간 유저를 알아야 하니까? 파티원들도?
  int32 userId = 1;// 나간 파티원
  int32 case = 2;// 분기 처리 -> (1 -> 강퇴, 2 -> 탈퇴)
  bool success = 3;
  string message = 4;
  GlobalFailCode failCode = 5;
}

// 파티 관련 클라가 서버에 보내는 패킷은 세분화를 하고 
// 처리하는 패킷을 하나로
// 파티 가입 관련 패킷 처리
message S_PartyResponse {
  PartyInfo party = 1;
  int32 case = 2;// 분기 처리 -> (1 -> 파티 생성, 2 -> 초대, 3 -> 가입, 4 -> 업데이트)
  bool success = 3;
  string message = 4;
  GlobalFailCode failCode = 5;
}

/*매칭 */
message C_MatchRequest {
  PartyInfo party = 1;
}

message S_MatchingNotification {
  bool isStart = 1;// 시작했는지 체크
}

message S_MatchResponse {
  DungeonInfo dungeonSession = 1;
  PartyInfo party = 2;// 합쳐진 파티 인포
  bool success = 3;// 매칭 완료 불값
  string message = 4;// 매칭 완료 
}

message C_MatchStopRequest {
  PartyInfo party = 1;//파티 정보
}

message S_MatchStopResponse {
  bool stop = 1;// 매칭 중단 결과
  string message = 2;// 매칭 중단 결과 메세지
}

/* 던전 입장 */

// 응답 패킷 - S_EnterDungeon
//partyId와 party중에 고민중
message C_EnterDungeon {
  int32 dungeonId = 1;
  repeated PartyInfo party = 2;
}

// Me
// 여기세 dungeonCode대신 dungeonInfo를 넣을 생각을 하고 있다. 아마 3번에 임시적으로 partyId를 넣을것이지만 계획을 partyInfo 4번에 screenText로 던전입장 완료던지기
message S_EnterDungeon {
  repeated DungeonInfo dungeon = 1;
  string message = 2;
}

// Me
message S_LeaveDungeon {}

// Me
message S_ScreenText {
  ScreenText screenText = 1;
}

// Me
message S_ScreenDone {}

// 경매장 페이지 네이션 요청 
message C_MarketList {
  int32 page = 1;
  int32 count = 2;
}
// 경매장 페이지 네이션 응답
message S_MarketList {
  int32 maxPage = 1;
  repeated marketItemInfo itemdata = 2;
}
// 경매장 자신 인벤토리 페이지 네이션 요청
message C_MarketMyList {
  int32 page = 1;
  int32 count = 2;
}
// 경매장 자신 인벤토리 페이지 네이션 응답
message S_MarketMyList {
  int32 maxPage = 1;
  repeated ItemInfo itemdata = 2;
}

// 소캣 기준으로 유저 찾고 판매 목록에 등록 
message C_SellInMarket {
  int32 inventoryId = 1;
  int32 itemId = 2;
  int32 gold = 3;
}
//
message S_SellInMarket {
  int32 inventoryId = 1;
  bool success = 2;
  string message = 3;
}
message C_BuyInMarket {
  int32 marketId = 1;
}
message S_BuyInMarket {
  bool success = 1;
  string message = 2;
}
message C_MarketSelectBuyName {
  int32 page = 1;
  int32 count = 2;
  string name = 3;
}
message S_MarketSelectBuyName {
  repeated marketItemInfo itemdata = 2;
}

// [추가] - 몬스터 관련 패킷 (수정할수 있음.)
// 스폰은 서버에서.
message S_MonsterSpawn{
  repeated SyncMonsterTransformInfo monsterInfo = 1;
}

// 클라 -> 서버 (서버에서 보낸 패킷 응답용.)
// 갈수 없는곳을 타겟일 경우 패킷을 보낸다.
message C_MonsterMove{
  string monstId = 1;
  TransformInfo transformInfo = 3;
}

// 몬스터 움직음은 서버에서 관리
// 서버 -> 클라.
message S_MonsterMove{
  repeated SyncMonsterTransformInfo transformInfo = 1;
}

message S_MonsterHit{
  repeated string monsterId = 1;
  string monsterAinID = 2;
}

message S_MonsterAttck{
  repeated string monsterId = 1;
  string monsterAinID = 2;
}

message S_MonsterDie{
  repeated string monsterId = 1;
  string monsterAinID = 2;
}


message C_PartyLeaderChangeRequest {
  int32 requesterId = 1;// 요청한 유저 id
  int32 changeUserId = 2;// 변경할 유저 id
}

// 경매 시스템 현재 데이터 보내주기
message S_SetAuctionData {
  int32 itemid = 1;
  int32 rarity = 2;
  int32 time = 3;
  int32 maxRewardItems = 4;
  string id = 5;
}
// 입력한 값만
message C_EnterAuctionBid {
  int32 gold = 1;
  string id = 2;
}
// 모두에게 보내줌 
message S_EnterAuctionBid {
  string name = 1;
  int32 gold = 2;
  int32 time = 3;
}
// 획득한 아이템 보여줌 
message S_FinalizeBuyAuction {
  string name = 1;
  int32 itemId = 2;
}
// 받을 골드수량 보여줌
message S_FinalizeAllAuction {
  string name = 1;
  int32 gold = 2;
}
// 경매 대기 10초간 
message S_WaitAuction {
  bool isWait = 1;
}
// 경매 끝
message S_EndAuction {
  bool isEnd = 1;
}

// 던전에서 사용할 프로토버퍼
message C_PlayerAction {
  oneof action {
    NormalAttack normalAttack = 1;
    SkillAttack skillAttack = 2;
    DodgeAction dodgeAction = 3;
    HitAction hitAction = 4;// 피격
  }
}

// 일반 공격
message NormalAttack {
  string attackerName = 1;// 공격하는 유저의 이름
  int32 targetId = 2;// 공격받는 몬스터의 아이디? 혹은 다른방식
  // 필요하다면 위치나 방향, etc.
}

// 스킬 공격
message SkillAttack {
  string attackerName = 1;// 공격하는 유저의 이름
  int32 skillId = 2;
  int32 targetId = 3;
  int32 currentMp = 4;// 가장 최근의 마나
  // 혹은 범위 정보, 마나 소모 등
}

// 회피
message DodgeAction {
  string attackerName = 1;       // 사용하는 유저의 이름
  Vector direction = 2;         // 플레이어가 바라보는(또는 이동하고자 하는) 방향
}

// 피격
message HitAction {
  int32 attackerId = 1;
  int32 damage = 2;
  // 상태이상, 크리티컬 여부 등
}

message S_PlayerAction {
  // oneof 그룹을 통해 단 하나의 액션 결과만 설정됩니다.
  oneof action {
    NormalAttackResult normalAttackResult = 1;
    SkillAttackResult skillAttackResult = 2;
    DodgeResult dodgeResult = 3;
    HitResult hitResult = 4;
  }
  // 액션 결과 전송의 성공 여부 및 메시지
  bool success = 5;
  string message = 6;
}

message S_SetPlayerHpData{
  int32 userId =1;

  float hp = 2; 
}
message S_SetPlayerData{
  int32 userId =1;
  StatInfo playerData = 2;
}
message S_SetMonsterHpData{
  int32 monsterId = 1;

  float hp = 2; 
}
// 일반 공격 결과 메시지
message NormalAttackResult {
  int32 targetId = 1;// 공격 대상 ID
  int32 damageDealt = 2;// 입힌 피해량
  string useUserName = 3; // 사용한 유저의 닉네임
  // 필요한 추가 필드가 있다면 여기에 작성
}

// 스킬 공격 결과 메시지
message SkillAttackResult {
  int32 skillId = 1;// 사용한 스킬의 ID
  int32 targetId = 2;// 공격 대상 ID
  int32 damageDealt = 3;// 입힌 피해량
  string useUserName = 4; // 사용한 유저의 닉네임
  // 필요한 추가 필드가 있다면 여기에 작성
}

// 회피(도주) 결과 메시지 -> 이부분 지금 2,3번 필요없어 보임임
message DodgeResult {
  int32 evadedDamage = 1;        // 회피로 인해 피해를 줄인 양
  float dodgeDistance = 2;       // 회피 이동 거리
  Vector direction = 3;         // 사용자가 요청한 회피 방향
  Vector finalPosition = 4;     // 서버에서 계산한 최종 위치
  string useUserName = 5;        // 사용한 유저의 닉네임
}

// 피격 결과 메시지
message HitResult {
  int32 damageReceived = 1;// 받은 피해량
  int32 currentHp = 2;// 피격 후 남은 HP
  string userName = 3; // 피격당한 유저의 닉네임
  // 필요한 추가 필드가 있다면 여기에 작성
}

message C_DungeonEnter {

}
message S_DungeonSpawn {
  int32 userId = 1;// 자기자신
  DungeonInfo dungeonInfo = 2;
  repeated TransformInfo playerTransforms = 3;
}
message S_DungeonDeSpawn {
  int32 playerId = 1;// 유저 id
}
message C_DungeonExit {

}
// 정보 구조체

// 벡터 정보를 나타내는 메시지
message Vector {
  float x = 1;
  float y = 2;
  float z = 3;
}

message PlayerInfo {
  int32 playerId = 1;// 입장할때 서버 내부에서 생성한 관리코드
  string nickname = 2;// C_EnterGame 에서 지정한 이름
  int32 class = 3;// C_EnterGame 에서 지정한 직업 정보, 이 정보를 통해 캐릭터가 결정
  TransformInfo transform = 4;
  StatInfo statInfo = 5;
}

// [추가] 동기화 리메이크에 사용할 패킷
message SyncTransformInfo {
  int32 playerId = 1;// 유저 id 
  TransformInfo transform = 2;// 트랜스폼 정보
  float speed = 3;// 스피드
}

// [추가] 몬스터 동기화에 사용할 패킷
message SyncMonsterTransformInfo {
  string monsterId = 1; // 몬스터 id 
  MonsterStatus monsterStatus = 2; // 몬스터 정보.
  TransformInfo transform = 3; // 트랜스폼 정보
  float speed = 4; // 스피드
}


// C_Enter 를 통해 입장했을때는 서버에서 랜덤으로 위치값 생성 / 기본값은 하단 밸류 참조
// C_Move 를 통해 전달된 데이터는 그대로 다른 사용자에게 릴레이
message TransformInfo {
  float posX = 1;// 기본값 : -9 ~ 9
  float posY = 2;// 기본값 : 1
  float posZ = 3;// 기본값 : -8 ~ 8
  float rot = 4;// 기본값 : 0~360
}

message Velocity {
  float x = 1;
  float y = 2;
  float z = 3;
}

// [수정] magic은 빼야하는가?
message StatInfo {
  int32 level = 1;
  float hp = 2;
  float maxHp = 3;
  float mp = 4;
  float maxMp = 5;
  float atk = 6;
  float def = 7;
  float speed = 9;
}

message ScreenText {
  string msg = 1;
  bool typingAnimation = 2;
  optional ScreenTextAlignment alignment = 3;
  optional Color textColor = 4;
  optional Color screenColor = 5;
}

message ScreenTextAlignment {
  int32 x = 1;
  int32 y = 2;
}

message Color {
  int32 r = 1;
  int32 g = 2;
  int32 b = 3;
}

// 이던전 인포를 던전클래스에 있는것들로 바꾸야힌다.
message DungeonInfo {
  string dungeonId = 1;
  PartyInfo partyInfo = 2;
  string dungeonState = 3;
  repeated int32 monsterId = 4;// monsterId를 배열로 변경
}

message MonsterStatus {
  int32 monsterIdx = 1;
  int32 monsterModel = 2;
  string monsterName = 3;
  float monsterHp = 4;
}

message ActionSet {
  int32 animCode = 1;
  int32 effectCode = 2;
}

message PlayerStatus {
  int32 playerId = 1;
  int32 playerClass = 2;
  int32 playerLevel = 3;
  string playerName = 4;
  float playerFullHp = 5;
  float playerFullMp = 6;
  float playerCurHp = 7;
  float playerCurMp = 8;
}

message BattleLog {
  string msg = 1;
  bool typingAnimation = 2;
  repeated BtnInfo btns = 3;
}

message BtnInfo {
  string msg = 1;
  bool enable = 2;
}

message GlobalFailCode {
  int32 code = 1;
}
message PartyInfo {
  string partyId = 1;
  string partyName = 2;// 파티 이름
  int32 partyLeaderId = 3;// 리더 아이디
  int32 maximum = 4;
  int32 dungeonIndex = 5;// 들어갈 던전 인덱스
  repeated PlayerStatus Players = 6;
}
message StoreItemInfo {
  int32 id = 1;
  int32 itemId = 2;
  int32 stock = 3;
  int32 price = 4;
}

message ItemInfo {
  int32 id = 1;
  int32 price = 2;
  int32 itemType = 3;
  string name = 4;
  float stat = 5;
  bool equiped = 6;
  int32 rarity = 7;
  int32 position = 8;
  string imgsrc = 9;
  int32 quantity = 10;
  bool stackable = 11;
  int32 itemId = 12;
}

message ItemData {
  int32 id = 1;
  string name = 2;
  int32 itemType = 3;
  float stat = 4;
  int32 price = 5;
  string imgsrc = 7;
  bool stackable = 8;
}

message marketItemInfo {
  int32 marketId = 1;
  int32 itemId = 2;
  string name = 3;
  int32 upgrade = 4;
  int64 endTime = 5;
  int32 price = 6;
}

message C_Emote {
  int32 playerId = 1;
  int32 type = 2;
  string emote = 3;
}

message S_Emote {
  int32 playerId = 1;
  int32 type = 2;
  string emote = 3;
  int32 errortype = 4;
}

// 아이템 판매 요청
message C_SellItemRequest {
  int32 inventoryId = 1;
  int32 price = 2;
}
// 아이템 판매 응답
message S_SellItemResponse {
  bool success = 1;
  string message = 2;
  GlobalFailCode failCode = 3;
}
// 상점 인벤토리 요청
message C_ShopInventoryRequest {
  uint32 page = 1;
  uint32 count = 2;
}
// 상점 인벤토리 응답
message S_ShopInventoryList {
  uint32 MaxPage = 1;
  repeated ItemInfo itemdata = 2;
}

message C_PlayerRangeAttack {
  repeated uint32 direction =1; // x,y,z 방향백터
}

message S_PlayerRangeAttack {
  uint32 arrowId =1;
  string message =2;
}

message C_RangeAttackImpact {
  uint32 arrowId =1;
  string monsterId =2;
}
message S_RangeAttackImpact{
  string monsterId =1;
  uint32 monsterHp =2;
  uint32 damage =3;
  string message=4;
}

message C_RangeAttackCollide{
  uint32 arrowId = 1;
  repeated uint32 collide =2;
}

message S_RangeAttackCollide{
  bool success =1;
  string message =2;
}