syntax = "proto3";

package Google.Protobuf.Protocol;
/* 유저 패킷 */

enum MsgId {
  C_REGISTERREQUEST = 0;
  S_REGISTERRESPONSE = 1;
  C_LOGINREQUEST = 2;
  S_LOGINRESPONSE = 3;
  C_SELECTCHARACTERREQUEST = 4;
  S_ENTER = 5;
  S_SPAWN = 6;
  S_DESPAWN = 7;
  C_MOVE = 8;
  S_MOVE = 9;
  C_ANIMATION = 10;
  S_ANIMATION = 11;
  C_CHAT = 12;
  S_CHAT = 13;
  C_BUYITEMREQUEST = 14;
  S_BUYITEMRESPONSE = 15;
  C_EQUIPITEMREQUEST = 16;
  S_EQUIPITEMRESPONSE = 17;
  C_DISROBEITEMREQUEST = 18;
  S_DISROBEITEMRESPONSE = 19;
  C_ACTIVEITEMREQUEST = 20;
  S_ACTIVEITEMREQUEST = 21;
  C_PARTYREQUEST = 22;
  S_PARTYRESPONSE = 23;
  C_ENTERDUNGEON = 24;
  S_ENTERDUNGEON = 25;
  S_LEAVEDUNGEON = 26;
  S_SCREENTEXT = 27;
  S_SCREENDONE = 28;
  C_PARTYINVITEREQUEST = 29;
  C_PARTYJOINREQUEST = 30;
  C_PARTYLISTREQUEST = 31;
  C_SEARCHPARTYREQUEST = 32;
  C_PARTYKICKREQUEST = 33;
  C_PARTYEXITREQUEST = 34;
  S_PARTYSEARCHRESPONSE = 35;
  S_PARTYRESULTRESPONSE = 36;
  C_MARKETLIST = 37;
  S_MARKETLIST = 38;
  C_MARKETMYLIST = 39;
  S_MARKETMYLIST = 40;
  C_SELLINMARKET = 41;
  S_SELLINMARKET = 42;
  C_BUYINMARKET = 43;
  S_BUYINMARKET = 44;
  C_INVENTORYREQUEST = 45;
  S_INVENTORYRESPONSE = 46;
  C_EMOTE = 47;
  S_EMOTE = 48;
}

//회원가입 요청
message C_RegisterRequest {
  string email = 1;
  string nickname = 2;
  string password = 3;
}

//회원가입 응답
message S_RegisterResponse {
  bool success = 1;
  string message = 2;
  GlobalFailCode failCode = 3;
}

//로그인 요청
message C_LoginRequest {
  string email = 1;
  string password = 2;
}

//로그인 응답
message S_LoginResponse {
  bool success = 1;
  string token = 2;
  string message = 3;
  GlobalFailCode failCode = 4;
}

//캐릭터 선택
message C_SelectCharacterRequest {
  int32 class = 2;
}


// [수정] 다른유저에게 본인 케릭터 정보를 보내야한다.
message S_Enter {
  PlayerInfo player = 1;
}

// [수정] 본인에게 다른 유저 정보, 스토어리스트 보내야한다. 
message S_Spawn {
  int32 userId = 1;
  repeated PlayerInfo players = 2;
  repeated ItemInfo storeList = 3;
}

// 캐릭터 없애주기!
message S_Despawn {
  repeated int32 playerIds = 2;
}

/* 캐릭터 패킷 */

// 응답 패킷 - S_Move
message C_Move {
  TransformInfo transform = 1;
}

// ALL
message S_Move {
  int32 playerId = 1;
  TransformInfo transform = 2;
}

// 응답 패킷 - S_Animation
message C_Animation {
  int32 animCode = 1;
}

// ALL
message S_Animation {
  int32 playerId = 1;
  int32 animCode = 2;
}

/* 채팅 패킷 */

// ALL
message C_Chat {
  int32 playerId = 1;
  int32 type = 2;
  string senderName = 3;
  string chatMsg = 4;
}

// 응답 패킷 - C_Chat
message S_Chat {
  int32 playerId = 1;
  int32 type = 2;
  int32 errorType = 3;
  string chatMsg = 4;
}

/* 상점 패킷 */

message C_BuyItemRequest {
  string itemname = 1;
  int32 price = 2;
}
message S_BuyItemResponse {
  bool success = 1;
  string message = 2;
  GlobalFailCode failCode = 3;
}

/* 아이템 패킷 */

message C_InventoryRequest {
  int32 charId = 1;
}

message S_InventoryResponse {
  repeated ItemInfo inventory = 1;
}

/* 장착 관련 */
message C_EquipItemRequest {
  int32 itemId = 1;
}

message S_EquipItemResponse {
  int32 itemId = 1;
  bool success = 2;
  string message = 3;
  GlobalFailCode failCode = 4;
}

message C_DisrobeItemRequest {
  int32 itemId = 1;
}

message S_DisrobeItemResponse {
  int32 itemId = 1;
  bool success = 2;
  string message = 3;
  GlobalFailCode failCode = 4;
}

message C_ActiveItemRequest {
  int32 itemId = 1;
}

// 
message S_ActiveItemResponse {
  int32 itemId = 1;
  bool success = 2;
  string message = 3;
  GlobalFailCode failCode = 4;
}

/* 파티 패킷 */

message C_PartyRequest {
  int32 userId = 1;
  string partyName = 2;// 파티 이름 추가
}

// 초대용 패킷 
// 초대한 유저의 id를 파티 세션에서 검색을 한 후 파티가 존재하면 그 아이디를 전송
message C_PartyInviteRequest {
  string requesterUserNickname = 1;// 초대한 유저 닉네임
  string participaterUserNickname = 2;// 초대할 유저 닉네임
}

// 파티 신청 패킷
message C_PartyJoinRequest {
  int32 partyId = 1;// 파티 id
  int32 userId = 2;// 가입할 유저 id
}

message C_PartyListRequest {
  // 빈값으로 요청 
  // 5개만 요청(다음페이지를 누르면 다시 요청)
  // 서버에서 파티 세션 전송?
}

//지금은 아예 똑같거나 LIKE 써서 사용(추후 좋은아이디어가 있으면 수정)
message C_SearchPartyRequest {
  string partyName = 1;// 검색한 파티 이름
}

// 추방 패킷
// 추방 요청 유저가 파티세션에 있는지 검사 & 파티장인지 검사 후 성공 실패 전송
message C_PartyKickRequest {
  int32 requesterUserId = 1;// 추방 요청 유저 id
  int32 kickUserUserId = 2;// 추방 유저 id
}

// 파티 나가기
message C_PartyExitRequest {
  // 파티 세션에서 파티에 들어가있는지 검사 후 방장이였다면 다른 사람에게 방장을 넘기고 나가기
  int32 userId = 1;// 나갈 유저 id
}

// 파티 조회 관련 패킷
message S_PartySearchResponse {
  repeated PartyInfo info = 1;
    int32 case = 2; // case: (1 -> 모든 리스트 조회, 2 -> 검색)
    bool success = 3;
    string message = 4;
    GlobalFailCode failCode = 5;
}

// 파티 해체 관련 패킷
message S_PartyResultResponse {
  // 나간 유저를 알아야 하니까? 파티원들도?
  int32 userId = 1; // 나간 파티원
    int32 case = 2; // 분기 처리 -> (1 -> 강퇴, 2 -> 탈퇴)
    bool success = 3;
    string message = 4;
    GlobalFailCode failCode = 5;
}

// 파티 관련 클라가 서버에 보내는 패킷은 세분화를 하고 
// 처리하는 패킷을 하나로
// 파티 가입 관련 패킷 처리
message S_PartyResponse {
    PartyInfo party = 1;
    int32 case = 2; // 분기 처리 -> (1 -> 파티 생성, 2 -> 초대, 3 -> 가입)
    bool success = 3;
    string message = 4;
    GlobalFailCode failCode = 5;
}

/*매칭 */
message C_matchRequest{
  PartyInfo party =1;
  int32 dungeonCode=2;
  repeated PlayerStatus players=3;
}


message S_matchResponse{
  repeated DungeonInfo dungeon = 1;
  repeated PlayerInfo players = 2;
  repeated PartyInfo party = 3;
  string message = 4;
}

/* 던전 입장 */

// 응답 패킷 - S_EnterDungeon
//partyId와 party중에 고민중
message C_EnterDungeon {
  repeated DungeonInfo dungeon = 1;
  repeated PlayerInfo players = 2;
  repeated PartyInfo party = 3;
}

// Me
// 여기세 dungeonCode대신 dungeonInfo를 넣을 생각을 하고 있다. 아마 3번에 임시적으로 partyId를 넣을것이지만 계획을 partyInfo 4번에 screenText로 던전입장 완료던지기
message S_EnterDungeon {
  repeated DungeonInfo dungeon = 1;
  repeated PlayerInfo players = 2;
  repeated PartyInfo party = 3;
  optional ScreenText screenText = 4;
}

// Me
message S_LeaveDungeon {}

// Me
message S_ScreenText {
  ScreenText screenText = 1;
}

// Me
message S_ScreenDone {}

// 경매장 페이지 네이션 요청 
message C_MarketList {
  int32 page = 1;
  int32 count =2;
}
// 경매장 페이지 네이션 응답
message S_MarketList {
  int32 maxPage = 1;
  repeated marketItemInfo itemdata = 2;
}
// 경매장 자신 인벤토리 페이지 네이션 요청
message C_MarketMyList {
  int32 page = 1;
  int32 count =2;
}
// 경매장 자신 인벤토리 페이지 네이션 응답
message S_MarketMyList {
  int32 maxPage = 1;
  repeated ItemInfo itemdata = 2;
}

// 소캣 기준으로 유저 찾고 판매 목록에 등록 
message C_SellInMarket {
  int32 inventoryId = 1;
  int32 itemId = 2;
}
//
message S_SellInMarket {
  int32 inventoryId = 1;
  bool success = 2;
  string message =3;
}
message C_BuyInMarket {
  int32 marketId = 1;
}
message S_BuyInMarket {
  bool success = 1;
  string message =2;
}

// 정보 구조체

message PlayerInfo {
  int32 playerId = 1;// 입장할때 서버 내부에서 생성한 관리코드
  string nickname = 2;// C_EnterGame 에서 지정한 이름
  int32 class = 3;// C_EnterGame 에서 지정한 직업 정보, 이 정보를 통해 캐릭터가 결정
  TransformInfo transform = 4;
  StatInfo statInfo = 5;
}

// C_Enter 를 통해 입장했을때는 서버에서 랜덤으로 위치값 생성 / 기본값은 하단 밸류 참조
// C_Move 를 통해 전달된 데이터는 그대로 다른 사용자에게 릴레이
message TransformInfo {
  float posX = 1;// 기본값 : -9 ~ 9
  float posY = 2;// 기본값 : 1
  float posZ = 3;// 기본값 : -8 ~ 8
  float rot = 4;// 기본값 : 0~360
}

// [수정] magic은 빼야하는가?
message StatInfo {
  int32 level = 1;
  float hp = 2;
  float maxHp = 3;
  float mp = 4;
  float maxMp = 5;
  float atk = 6;
  float def = 7;
  float speed = 9;
}

message ScreenText {
  string msg = 1;
  bool typingAnimation = 2;
  optional ScreenTextAlignment alignment = 3;
  optional Color textColor = 4;
  optional Color screenColor = 5;
}

message ScreenTextAlignment {
  int32 x = 1;
  int32 y = 2;
}

message Color {
  int32 r = 1;
  int32 g = 2;
  int32 b = 3;
}

// 이던전 인포를 던전클래스에 있는것들로 바꾸야힌다.
message DungeonInfo {
  int32 dungeonId = 1;
  int32 DungeonIndex=2;
  string dungeonState=3;
  repeated PlayerStatus Player=4;
  repeated MonsterStatus monsters = 5;
}

message MonsterStatus {
  int32 monsterIdx = 1;
  int32 monsterModel = 2;
  string monsterName = 3;
  float monsterHp = 4;
}

message ActionSet {
  int32 animCode = 1;
  int32 effectCode = 2;
}

message PlayerStatus {
  int32 playerClass = 1;
  int32 playerLevel = 2;
  string playerName = 3;
  float playerFullHp = 4;
  float playerFullMp = 5;
  float playerCurHp = 6;
  float playerCurMp = 7;
}

message BattleLog {
  string msg = 1;
  bool typingAnimation = 2;
  repeated BtnInfo btns = 3;
}

message BtnInfo {
  string msg = 1;
  bool enable = 2;
}

  message GlobalFailCode{
    int32 code =1;
  }
  message PartyInfo{
    int32 partyId = 1 ;
    string partyName = 2; // 파티 이름
    int32 partyLeaderId = 3; // 리더 아이디
    int32 maximum = 4;
    repeated PlayerStatus Players = 5;
  }
  message ItemInfo{
    int32 id =1;
    int32 price = 2;
    int32 itemType =3;
    string name =4;
    float stat =5;
    bool equiped =6;
    int32 rarity =7; 
  }


 message marketItemInfo{
    int32 marketId = 1;
    int32 itemId =2;
    int32 upgrade =3;
    int64 endTime = 4;
    int32 price = 5;
 }

message C_Emote{
  int32 playerId = 1;
  int32 type = 2;
  string emote = 3;
}

message S_Emote{
  int32 playerId = 1;
  int32 type = 2;
  string emote = 3;
  int32 errortype = 4;
}